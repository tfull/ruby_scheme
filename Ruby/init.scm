(define (length l)
  (if (null? l)
      0
      (+ 1 (length (cdr l)))))

(define (append l1 l2)
  (if (null? l1)
      l2
      (cons (car l1) (append (cdr l1) l2))))

(define (reverse l)
  (if (null? l)
      ()
      (append (reverse (cdr l)) (list (car l)))))

(define (list-tail l n)
  (if (zero? n)
      l
      (list-tail (cdr l) (- n 1))))

(define (list-ref l k)
  (if (zero? k)
      (car l)
      (list-ref (cdr l) (- k 1))))

(define (newline)
  (display #\newline))


(define (map f l . ls)
  (define (map_k f)
    (lambda (l)
      (if (null? l)
          ()
          (cons (f (car l)) ((map_k f) (cdr l))))))
  (define (take n)
    (lambda (l)
      (if (= n 0)
          ()
          (cons (car l) ((take (- n 1)) (cdr l))))))
  (define (nth n)
    (lambda (l)
      (if (= n 0)
          (car l)
          ((nth (- n 1)) (cdr l)))))
  (define (built f)
    (lambda (l)
      (__built_in_apply_function_flat__ f l)))
  (if (= (length ls) 0)
      ((map_k f) l)
      (let* ((li (cons l ls))
             (len (__built_in_apply_function_flat__ min ((map_k length) li)))
             (new_li ((map_k (take len)) li)))
        (define (iter n)
          (if (< n len)
              (cons ((map_k (nth n)) new_li) (iter (+ n 1)))
              ()))
        ((map_k (built f)) (iter 0)))))
        
(define (caar p) (car (car p)))
(define (cadr p) (car (cdr p)))
(define (cdar p) (cdr (car p)))
(define (cddr p) (cdr (cdr p)))
(define (caaar p) (car (caar p)))
(define (caadr p) (car (cadr p)))
(define (cadar p) (car (cdar p)))
(define (caddr p) (car (cddr p)))
(define (cdaar p) (cdr (caar p)))
(define (cdadr p) (cdr (cadr p)))
(define (cddar p) (cdr (cdar p)))
(define (cdddr p) (cdr (cddr p)))

(define (caaaar p) (car (caaar p)))
(define (caaadr p) (car (caadr p)))
(define (caadar p) (car (cadar p)))
(define (caaddr p) (car (caddr p)))
(define (cadaar p) (car (cdaar p)))
(define (cadadr p) (car (cdadr p)))
(define (caddar p) (car (cddar p)))
(define (cadddr p) (car (cdddr p)))
(define (cdaaar p) (cdr (caaar p)))
(define (cdaadr p) (cdr (caadr p)))
(define (cdadar p) (cdr (cadar p)))
(define (cdaddr p) (cdr (caddr p)))
(define (cddaar p) (cdr (cdaar p)))
(define (cddadr p) (cdr (cdadr p)))
(define (cdddar p) (cdr (cddar p)))
(define (cddddr p) (cdr (cdddr p)))


(define (flush) (begin))

(define (zero? x) (= x 0))
(define (positive? x) (> x 0))
(define (negative? x) (< x 0))

